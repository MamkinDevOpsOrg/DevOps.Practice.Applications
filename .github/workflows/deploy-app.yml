name: Build and push new image to ECR

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Target environment'
        required: true
        type: choice
        default: dev
        options:
          - dev
          - prod

      version_tag:
        description: 'Docker image tag (e.g. v1.0.3)'
        required: true

env:
  AWS_REGION_DEV: us-west-2
  AWS_REGION_PROD: us-east-1
  ECR_REPO_DEV: ecr-kapset-dev
  ECR_REPO_PROD: ecr-kapset-prod

jobs:
  deploy:
    name: Deploy to ${{ github.event.inputs.env }}
    runs-on: ubuntu-latest

    environment:
      name: ${{ github.event.inputs.env }}

    steps:
      - name: Checkout app code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version_tag || 'main' }}

      - name: Set dynamic variables
        run: |
          if [[ "${{ github.event.inputs.env }}" == "prod" ]]; then
            echo "AWS_REGION=${{ env.AWS_REGION_PROD }}" >> $GITHUB_ENV
            echo "ECR_REPO=${{ env.ECR_REPO_PROD }}" >> $GITHUB_ENV
          else
            echo "AWS_REGION=${{ env.AWS_REGION_DEV }}" >> $GITHUB_ENV
            echo "ECR_REPO=${{ env.ECR_REPO_DEV }}" >> $GITHUB_ENV
          fi

          echo "IMAGE_TAG=${{ github.event.inputs.version_tag }}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set ECR registry variable
        run: echo "REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV

      - name: Fail if image tag already exists in ECR (for safety)
        if: ${{ github.event.inputs.version_tag != '' }}
        run: |
          echo "üîí Verifying that tag $IMAGE_TAG is not already used in $ECR_REPO..."
          IMAGE_EXISTS=$(aws ecr describe-images \
            --region $AWS_REGION \
            --repository-name $ECR_REPO \
            --query "imageDetails[?contains(imageTags, '$IMAGE_TAG')]" \
            --output text)

          if [ -n "$IMAGE_EXISTS" ]; then
            echo "‚ùå Image tag '$IMAGE_TAG' already exists in ECR"
            exit 1
          fi

          echo "‚úÖ Tag is safe to use: $IMAGE_TAG"

      - name: Build Docker image
        run: |
          docker build -t app1 ./app1

      - name: Tag Docker image
        run: |
          docker tag app1 $REGISTRY/$ECR_REPO:$IMAGE_TAG

      - name: Push Docker image to ECR
        run: |
          docker push $REGISTRY/$ECR_REPO:$IMAGE_TAG

      - name: Save image tag to SSM Parameter Store
        run: |
          aws ssm put-parameter \
            --name "/app1/${{ github.event.inputs.env }}/image_tag" \
            --type String \
            --overwrite \
            --value "${{ github.event.inputs.version_tag }}"
